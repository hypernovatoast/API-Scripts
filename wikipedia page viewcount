#!/bin/bash

clear

### Prompt the user for what Wiki article they'd like to search for and how many years back to search.
read -r -p "What article would you like to see the viewcount for?: " article
read -r -p "How many years of history should I look up?: " yearsAgoInput
while ! [[ $yearsAgoInput =~ ^[1-9][0-9]*$ ]]; do
    echo "Please enter a number."
    read -r -p "How many years of history should I look up?: " yearsAgoInput
done
article=$(echo "$article" | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1' | sed -E 's/ /_/g') #text formatting. first letter uppercase, other letters lowercase, spaces into underscores

### API call Function ### 

apicall() {
    ## Variables
    API="https://wikimedia.org/api/rest_v1"
    header="[redacted]"
    ## Date variables for $start to run properly
    fin=$(date +%Y%m%d)
    current_year=${fin:0:4}
    current_month=${fin:4:2}
    current_day=${fin:6:2}
    start=$((current_year - $yearsAgoInput))
    start="${start}${current_month}${current_day}"

    curl \
        -H "$header" \
        "$API/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/$article/daily/$start/$fin" | \
    jq '.items[] | [.timestamp,.views]'
}

### CSV output function ###
csv() {
    clear
    
    csvPathTop25="/csv/path.csv" #be sure to change this to your desired output path.
    topLine="date,views" #This will be the first line of the CSV script to identify the columns
    curlCommand=$(curl "https://en.wikipedia.org/wiki/$article")
    redirectCommand=(curl 'https://en.wikipedia.org/w/index.php?title=$article&redirect=no')
    
    if
        ## Check 1 - Does the article exist? If no, exit script.
        echo "$curlCommand" | grep -i "Wikipedia does not have an article with this exact name." > /dev/null ; then
        clear
        echo "Sorry, no article with this name exists. Try again"
        sleep 3
    elif
        ## Check 2 - Is this an article or a disambiguation? If disambiguation, question user for which page they want.
        echo "$curlCommand" | grep -q "may refer to:" ; then
        clear
        echo "Oops! This article has more than one result. Please choose one of the following options..."
        sleep 3 
        # Extract the list of options
        options=$(sed -n 's/.*<li><a href="\/wiki\/\([^"]*\)".*/\1/p' <<< "$curlCommand")

        # Display the options
        count=1
        while IFS= read -r option; do
            echo "$count. $option"
            ((count++))
        done <<< "$options"

        # Prompt user to select an article
        echo " "
        read -r -p "Enter the number corresponding to your selection: " selection
        echo " "

        # Validate that one of the article's was selected
        if [[ $selection =~ ^[0-9]+$ ]] && ((selection >= 1 && selection <= count-1)); then
            disambigArticleChoice=$(sed -n "${selection}p" <<< "$options")
            echo "You selected: $disambigArticleChoice"
            echo " "
            sleep 2
            #re-define the following variables so they match the new article choice
            article="$disambigArticleChoice"
            csvPathTop25="$HOME/localScripts/${article}Top25.csv"
            # Execute with the new specific article selected
            printf "%s\n%s\n\n" "$disambigArticleChoice Wikipedia article views in last $yearsAgoInput years" "$topLine" > "$csvPathTop25"
            apicall | jq -r @csv | sort -t',' -k2 -nr | head -n 25 >> "$csvPathTop25" &&
            echo "Success! Your file is available at $csvPathTop25"
        else
            echo "Sorry, that isn't a valid choice. Please run script again."
            echo " "
            sleep 3
        fi
    else
        ## Best case!! Article exists and there's only one result. Extract that beautiful CSV.
        clear
        printf "%s\n%s\n\n" "$article Wikipedia article views in last $yearsAgoInput years" "$topLine" > "$csvPathTop25"
        apicall | jq -r @csv | sort -t',' -k2 -nr | head -n 25 >> "$csvPathTop25" && clear &&
            echo "Success! Your file is available at $csvPathTop25"
            sleep 3
    fi
}

#execute
csv
